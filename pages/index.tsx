import Head from 'next/head'
// import Image from 'next/image'
import { Rubik } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { Box, Center, Circle, Flex, Grid, GridItem, Image, Stack, Text, VStack } from '@chakra-ui/react'
import { getTimeData } from '@/lib/timeData'
import { itemframes } from '@/types'
import { useState } from 'react'

const rubik = Rubik({weight:['300','400','500'], subsets: ['latin'] })

// const TimeLink({frame, isActive}:{frame:string, isActive:(a:string)=>void}){
//   return <Text color={isActive('daily')} cursor="pointer" onClick={()=>changeFrame('daily')}>Daily</Text>
// }

export default function Home({timeData}:{timeData:itemframes[]}) {
  const [choosenTime, setChoosenTime] = useState('daily');
  const previous = (choosenTime == 'daily')? 'Yesterday' : 'Last '+choosenTime.slice(0, choosenTime.length -2)
  function changeFrame(frame:string){
    setChoosenTime(frame);
  }
  function isActive(frame:string){
    return frame == choosenTime ? "white" : "brand.desaturatedBlue";
  }
  return (
    <>
      <Head>
        <title>Time Tracking Dashboard</title>
        <meta name="description" content="Generated by Nida Nido" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/images/favicon-32x32.png" />
      </Head>
      <main className={rubik.className}>
        <Flex flexFlow="column nowrap" justifyContent="center" alignItems="center" 
              w='100vw' h={{base:'100%', sm:'100vh'}} bg='brand.veryDarkBlue' fontSize="18px">
          <Grid h={{base:'100%', sm:'500px'}} w={{base:'90%', sm:'1000px'}}
                templateColumns={{base:'repeat(1, 1fr)', sm:'repeat(4, 1fr)'}}
                templateRows={{base:'repeat(8, 1fr)', sm:'repeat(2, 1fr)'}}
                gap={4}
                mt={{base:'50px'}}
                >
                  <GridItem borderRadius={10} rowSpan={{base:1, sm:2}} colSpan={1} bg="brand.darkBlue" >
                    <Flex h='65%' w='100%' bg='brand.blue' borderRadius={10} p="20px" 
                          flexDir={{base:'row', sm:'column'}}>
                      <Circle size={{base:'65px', sm:"50px"}} border="2px solid white" 
                            mb={{base:'auto',sm:"30px"}} mt={{base:'auto'}}>
                        <Image src="/images/image-jeremy.png" alt="jeremy" />
                      </Circle>
                      <Box>
                        <Text fontSize="12px" color="brand.paleBlue">Report for</Text>
                        <Text fontSize="30px" color="white" fontWeight="300" lineHeight={1.2}>Jeremy Robson</Text>
                      </Box>
                    </Flex>
                    <Stack direction={{base:'row', sm:'column'}} justifyContent={{base:'space-between'}} 
                          p="20px" spacing="15px" alignItems="left" fontSize={{base:'18px', sm:'14px'}}>
                      <Text color={isActive('daily')} cursor="pointer" onClick={()=>changeFrame('daily')}>Daily</Text>
                      <Text color={isActive('weekly')} cursor="pointer" onClick={()=>changeFrame('weekly')}>Weekly</Text>
                      <Text color={isActive('monthly')} cursor="pointer" onClick={()=>changeFrame('monthly')}>Monthly</Text>
                    </Stack>
                    
                  </GridItem>
                  {
                    timeData.map(item=>{
                      const tipe = item.title.toLowerCase().split(' ').join('-')
                      console.log(tipe)
                      return  <GridItem borderRadius={10} rowSpan={1} colSpan={1} 
                                        bg={"brand."+tipe.split('-').join('')} position="relative"
                                        h={{base:'220px',sm:'auto'}} key={tipe} >
                      <Flex alignItems='flex-end' position="absolute" justifyContent="flex-end" right={0}>
                        <Image src={`/images/icon-${tipe}.svg`} width="50px" />
                      </Flex>
                      <Flex flexDir="column" justifyContent="flex-end" alignItems='self-end' w="100%" h="100%"
                            position="relative" color="white" >
                        <Box bg="brand.darkBlue" h='80%' w="100%" borderRadius={10} p="20px">
                          <Flex justifyContent="space-between">
                            <Text>{item.title}</Text>
                            <Center>
                              <Image src="/images/icon-ellipsis.svg" alt="ellipsis" h="5px" />
                            </Center>
                          </Flex>
                          <Text fontSize="30px" mt="40px">{eval(`item.timeframes.${choosenTime}.current`)}hrs</Text>
                          <Text fontSize='16px' fontWeight='300' color='brand.paleBlue'>{previous} - {eval(`item.timeframes.${choosenTime}.previous`)}hrs</Text>
                        </Box>
                      </Flex>
                      
                    </GridItem>
                    })
                  }
                 
                  {/* <GridItem borderRadius={10} rowSpan={1} colSpan={1} bg="brand.play"></GridItem>
                  <GridItem borderRadius={10} rowSpan={1} colSpan={1} bg="brand.study"></GridItem>
                  <GridItem borderRadius={10} rowSpan={1} colSpan={1} bg="brand.exercise"></GridItem>
                  <GridItem borderRadius={10} rowSpan={1} colSpan={1} bg="brand.social"></GridItem>
                  <GridItem borderRadius={10} rowSpan={1} colSpan={1} bg="brand.selfCare"></GridItem> */}
                </Grid>
        </Flex>
        
      </main>
    </>
  )
}

export async function getStaticProps() {
  const timeData = await getTimeData();
  console.log( typeof timeData)
  return {
    props:{
      timeData,
    }
  }
}
